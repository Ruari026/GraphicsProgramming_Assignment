#version 430
layout (local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2D img_output;

float epsilon = 0.001f;
 
// Camera Details
uniform vec3 cameraPos;
uniform vec3 cameraForward;
uniform float cameraFOV;

// Testing Cube Details
uniform vec3 cubePos;

// Testing Sphere Details
uniform vec3 spherePos;



// UNSIGNED DISTANCE FUNCTIONS
// Calculations For Distance Functions Sourced From:
// https://iquilezles.org/www/articles/distfunctions/distfunctions.htm
float DistanceToSphere(vec3 pointToCheck, vec3 sphereCenter, float sphereRadius)
{
	return length(pointToCheck - sphereCenter) - sphereRadius;
}
float DistanceToBox(vec3 pointToCheck, vec3 boxCenter, vec3 boxDimentions)
{
  vec3 q = abs(pointToCheck - boxCenter) - boxDimentions;
  return length(max(q, 0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);
}
float signedDistanceToScene(vec3 point)
{
	// Sphere Details
	float radius = 1.5; // Sphere Radius
	float sphereDistance = DistanceToSphere(point, spherePos, radius);

	// Cube Details
	vec3 size = vec3(1.0, 1.0, 1.0);
	float cubeDistance = DistanceToBox(point, cubePos, size);


	// Constructive Solid Geometry (Primitive Union)
    //return min(cubeDistance, sphereDistance);
	
	// Constructive Solid Geometry (Primitive Intersection)
    //return max(cubeDistance, sphereDistance);

	// Constructive Solid Geometry (Primitive Subtraction)
    //return max(cubeDistance, -sphereDistance);

	// Constructive Solid Geometry (Blending Primitives)
	float h = clamp(0.5 + 0.5 * (sphereDistance - cubeDistance) / 0.75, 0.0, 1.0 );
    return mix(sphereDistance, cubeDistance, h ) - 0.75 * h * (1.0 - h); 
}

vec3 estimateNormal(vec3 p)
{
    float xPl = signedDistanceToScene(vec3(p.x + epsilon, p.y, p.z));
    float xMi = signedDistanceToScene(vec3(p.x - epsilon, p.y, p.z));
    float yPl = signedDistanceToScene(vec3(p.x, p.y + epsilon, p.z));
    float yMi = signedDistanceToScene(vec3(p.x, p.y - epsilon, p.z));
    float zPl = signedDistanceToScene(vec3(p.x, p.y, p.z + epsilon));
    float zMi = signedDistanceToScene(vec3(p.x, p.y, p.z - epsilon));

    float xDiff = xPl - xMi;
    float yDiff = yPl - yMi;
    float zDiff = zPl - zMi;
    return normalize(vec3(xDiff, yDiff, zDiff));
}



// RAYMARCHING
void main() 
{
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	vec2 dims = imageSize(img_output); 
	vec2 uv = ((pixel_coords / dims) * 2 - 1);

	// Raycast Details
	vec3 rayOrigin = cameraPos;
	float f = tanh(cameraFOV / 2);
	vec3 rayDirection = vec3(((cameraForward.x * f) + uv.x), ((cameraForward.y * f) + uv.y), (cameraForward.z * f)); // Assumes that aspect ration = 1:1
	rayDirection = normalize(rayDirection);

	// Raycast Calculations
	vec4 pixel = vec4(0.0, 0.0, 0.0, 0.0);
	float rayDist = 0;
	while (rayDist < 25)
	{
		// Gets The Distance To The Sphere Surface
		vec3 checkPoint = rayOrigin + (rayDirection * rayDist);
		float dist = signedDistanceToScene(checkPoint);
		if (dist <= epsilon)
		{
			// Hit normal
			vec3 hitNormal = estimateNormal(checkPoint);
			
			// Light Details
			vec3 lightPos = vec3(2.5, 2.5, -5);
			vec3 lightDir = normalize(lightPos - checkPoint);


			// Simple ambient + diffuse lighting
			// Base Color
			vec3 baseColor = vec3(1.0, 1.0, 1.0);

			// Ambient Color
			vec3 lightColor = vec3(0.0, 0.2, 0.2);
			float ambientStrength = 0.6;
			vec3 ambientColor = ambientStrength * lightColor;

			// Diffuse Color
			float diff = max(dot(hitNormal, lightDir), 0.0);
			vec3 diffuseColor = diff * lightColor;

			// Output Color
			vec3 result = (ambientColor + diffuseColor) * baseColor;
			pixel = vec4(result, 1.0);
			

			// Rim Shading
			vec3 viewDirection = checkPoint - cameraPos;
			viewDirection = normalize(viewDirection);

			float dotProduct = dot(hitNormal, viewDirection);
			dotProduct = abs(dotProduct);

			pixel = mix(vec4(0.0, 1.0, 1.0, 1.0), pixel, (pow(dotProduct, 1)));

			break;
		}
		else
		{
			rayDist += dist;
		}
	}

	// Writing to the specific pixel in the image based on the current workgroup
	imageStore(img_output, ivec2(pixel_coords.xy), pixel);
}